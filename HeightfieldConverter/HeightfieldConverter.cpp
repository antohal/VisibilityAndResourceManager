#include "HeightfieldConverter.h"
#include "HeightfieldConverterPrivate.h"

HeightfieldConverter::HeightfieldConverter()
{
	_private = new HeightfieldConverterPrivate;
}

HeightfieldConverter::~HeightfieldConverter()
{
	delete _private;
}

// инициализация
void HeightfieldConverter::Init(ID3D11Device* in_pD3DDevice11, ID3D11DeviceContext* in_pDeviceContext)
{
	_private->Init(in_pD3DDevice11, in_pDeviceContext);
}

// Создать триангуляцию немедленно и дождаться готовности
void HeightfieldConverter::CreateTriangulationImmediate(const SHeightfield* in_pHeightfield, STriangulation* out_pTriangulation)
{
	_private->CreateTriangulationImmediate(in_pHeightfield, out_pTriangulation);
}

// добавить/удалить listener
void HeightfieldConverter::RegisterListener(HeightfieldConverterListener* in_pListener)
{
	_private->RegisterListener(in_pListener);
}

void HeightfieldConverter::UnregisterListener(HeightfieldConverterListener* in_pListener)
{
	_private->UnregisterListener(in_pListener);
}

// добавить задачу на триангуляцию, которая будет выполняться асинхронно с помощью DirectCompute
void HeightfieldConverter::AppendTriangulationTask(const SHeightfield* in_pHeightfield)
{
	_private->AppendTriangulationTask(in_pHeightfield);
}

void HeightfieldConverter::UpdateTasks()
{
	_private->UpdateTasks();
}

// Задать глобальный коэффициент масштаба.
// По умолчанию все расчеты ведуться в привязке к эллипсоиду Земли в системе координат WGS-84 в метрах
void HeightfieldConverter::SetWorldScale(float in_fScale)
{
	_private->SetWorldScale(in_fScale);
}

// Считать данные карты высот из текстуры
void HeightfieldConverter::ReadHeightfieldDataFromTexture(const wchar_t* in_pcwszTextureFileName, SHeightfield& out_Heightfield)
{
	_private->ReadHeightfieldDataFromTexture(in_pcwszTextureFileName, out_Heightfield);
}

void HeightfieldConverter::ReadHeightfieldDataFromMemory(const unsigned char* in_pData, unsigned int in_nWidth, unsigned int in_nHeight, SHeightfield& out_Heightfield)
{

}

// Освободить буферы триангуляции
void HeightfieldConverter::ReleaseTriangulation(STriangulation* triangulation)
{
	_private->ReleaseTriangulation(triangulation);
}

void HeightfieldConverter::ReleaseHeightfield(SHeightfield* heightfield)
{
	_private->ReleaseHeightfield(heightfield);
}

// Получить буферы вершин и индексов в памяти
void HeightfieldConverter::UnmapTriangulation(STriangulation* triangulation, SVertex* out_pVertexes, unsigned int* out_pIndices)
{
	_private->UnmapTriangulation(triangulation, out_pVertexes, out_pIndices);
}
